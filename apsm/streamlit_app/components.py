import os
from typing import Literal, Union, Tuple

import httpx
import streamlit as st
import pandas as pd
import numpy as np
import plotly
import plotly.express as px
from apsm.app.schemas import ModelType
from apsm.utils import setup_logger


logger = setup_logger(
    name='streamlit',
    log_file=os.getenv('PYTHONPATH') + '/logs/streamlit.log'
)

base_url = os.getenv('STREAMLIT_BASE_URL', 'http://fastapi:8000')


def get_analytics(
    df: pd.DataFrame,
    template_type: str,
    selected_ticker: str
) -> None:
    '''
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.

    Parameters
    ----------
    df : pd.DataFrame
        –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.

    Returns
    -------
    analytics : pd.DataFrame
        –ö–∞–¥—Ä –¥–∞–Ω–Ω—ã—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫—É.
    '''
    st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–¥—Ä–∞ –¥–∞–Ω–Ω—ã—Ö')
    a, b, c = st.columns(3)
    a.metric(label='–û–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö', value=df.shape[0])
    b.metric(label='–ö–æ–ª-–≤–æ —Ç–∏–∫–µ—Ä–æ–≤', value=df.shape[1])
    c.metric(
        label='–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
        value=df.nunique().sum()
    )

    st.subheader(f'{selected_ticker}')
    st.dataframe(df[selected_ticker].describe())

    st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞')
    fig = get_figure(
        df=df,
        ticker=selected_ticker
    )
    st.plotly_chart(fig)


async def train_model(
    df: pd.DataFrame,
    model_id: str,
    selected_model: str,
    trend: str,
    seasonal: str,
    seasonal_periods: int
) -> None:
    """
    –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    Parameters
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.
    model_id : str
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—É—á–∞–µ–º–æ–π –º–æ–¥–µ–ª–∏.
    selected_model : str
        –¢–∏–ø –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'holt_winters').
    trend : str
        –¢—Ä–µ–Ω–¥–æ–≤–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Holt-Winters.
    seasonal : str
        –°–µ–∑–æ–Ω–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Holt-Winters.
    seasonal_periods : int
        –î–ª–∏–Ω–∞ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.

    Returns
    -------
    None
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Streamlit.
    """
    url = f'{base_url}/fit'
    payload = {
        'data': df.values.tolist(),
        'config': {
            'id': model_id,
            'ml_model_type': selected_model
        }
    }

    if selected_model == 'holt_winters':
        payload['config']['hyperparameters'] = {
            'trend': trend,
            'seasonal': seasonal,
            'seasonal_periods': int(seasonal_periods)
        }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload)

        if response.status_code == 201:
            message = response.json()['message']
            st.write(message)
            logger.info(message)
        else:
            error_message = response.text
            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
            logger.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s',
                error_message
            )


def get_figure(
    df: pd.DataFrame,
    ticker: str
) -> plotly.graph_objs.Figure:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.

    Parameters
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    ticker : str
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Returns
    -------
    fig : plotly.graph_objs.Figure
        –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    fig = px.line(df, x=df.index, y=f'{ticker}', title=f'{ticker}')

    fig.update_layout(
        xaxis_title='Date',
        yaxis_title='Price',
        legend_title_text=f'{ticker}'
    )

    return fig


async def inference_model(
    df: pd.DataFrame,
    ticker: str,
    period: int
) -> None:
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.

    Parameters
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
    ticker : str
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    period : int
        –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–Ω—è—Ö.

    Returns
    -------
    None
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Streamlit.
    """
    url = f'{base_url}/predict'
    payload = {
        'n_periods': period
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload)

        if response.status_code == 200:
            predictions = response.json()
            st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')

            fig = get_figure(df, ticker)
            fig.add_scatter(
                x=pd.date_range(
                    start=df.index[-1] + pd.DateOffset(days=1),
                    periods=period,
                    freq='D',
                ),
                y=predictions['forecast'],
                mode='lines',
                name='Predictions',
            )
            st.plotly_chart(fig)

        else:
            error_message = response.text
            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
            logger.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s',
                error_message
            )


async def get_list_models() -> pd.DataFrame:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.

    Returns
    -------
    pd.DataFrame
        –¢–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª—è—Ö.
    """
    url = f'{base_url}/list'

    async with httpx.AsyncClient() as client:
        response = await client.get(url)

        if response.status_code == 200:
            models = response.json()['models']
            df = pd.DataFrame(models)
            st.table(df)

            return df

        else:
            error_message = response.text
            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
            logger.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s',
                error_message
            )


async def delete_models() -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

    Returns
    -------
    None
        –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Streamlit.
    """
    url = f'{base_url}/remove_all'

    async with httpx.AsyncClient() as client:
        response = await client.get(url)

        if response.status_code == 200:
            st.write(response.json()['message'])
        else:
            error_message = response.text
            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
            logger.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s',
                error_message
            )


def clean_data(
    df: pd.DataFrame,
    template_type: str
) -> pd.DataFrame:
    """
    –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞.

    Parameters
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.
    template_type : str
        –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ ('–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø).

    Returns
    -------
    pd.DataFrame
        –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    if template_type == '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç':
        df.dropna(inplace=True)
        df = df.filter(regex='Close', axis=1)
        df.columns = (col[: col.find('=')] for col in df.columns)
        cleaned_df = df.loc[:, (df == 0).sum() < 4][:-3]
    else:
        cleaned_df = df.loc[:, (df.isnull()).sum() < 115]
        cleaned_df.dropna(inplace=True)

    return cleaned_df


def upload_file(
    template_type: str
) -> Tuple[Union[pd.DataFrame, None], bool]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit –∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞.

    Parameters
    ----------
    template_type : str
        –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ ('–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø).

    Returns
    -------
    Tuple[Union[pd.DataFrame, None], bool]
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
        –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, False).
    """
    if template_type == '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç':
        st.header('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –≤–∞–ª—é—Çüîª')
    else:
        st.header('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –∞–∫—Ü–∏–πüîª')

    uploaded_file = st.file_uploader(label='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª', key=template_type)
    if uploaded_file:
        df = pd.read_parquet(uploaded_file, engine='pyarrow')
        cleaned_df = clean_data(df, template_type)

        return cleaned_df, True

    return None, False


def select_ticker(
    df: pd.DataFrame,
    template_type: str
) -> Union[str, None]:
    """
    –í—ã–±–æ—Ä —Ç–∏–∫–µ—Ä–∞ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å Streamlit.

    Parameters
    ----------
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞.
    template_type : str
        –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ ('–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø).

    Returns
    -------
    Union[str, None]
        –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω, –∏–Ω–∞—á–µ None.
    """
    st.sidebar.header('–í—ã–±–æ—Ä —Ç–∏–∫–µ—Ä–∞')
    options = df.columns

    search_term = st.sidebar.text_input(
        '–ü–æ–∏—Å–∫:',
        placeholder=f"""
            –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä {
                '–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã' if template_type == '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' else '–∞–∫—Ü–∏–∏'
            }
        """
    )

    filtered_options = [
        option for option in options
        if search_term.lower() in option.lower()
    ]

    selected_option = st.sidebar.selectbox(
        f"""
            –í—ã–±–µ—Ä–∏—Ç–µ {
                '–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É' if template_type == '–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' else '–∞–∫—Ü–∏—é'
            }
        """,
        filtered_options
    )

    if selected_option:
        st.write(f'–í–∞—à –≤—ã–±–æ—Ä: {selected_option}')

        return selected_option

    return None


async def set_active_model(model_id: str) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

    Parameters
    ----------
    model_id : str
        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è.

    Returns
    -------
    None
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Streamlit.
    """
    url = f'{base_url}/set'
    payload = {
        'id': model_id
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload)

        if response.status_code == 200:
            message = response.json()['message']

            st.write(message)
            logger.info(message)
        else:
            error_message = response.text

            st.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
            logger.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s',
                error_message
            )


async def fit_or_predict(
    template_type: str,
    df: pd.DataFrame,
    ticker: str = None
):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞.

    Parameters
    ----------
    template_type : str
        –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ('fit' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, 'predict' –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è).
    df : pd.DataFrame
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    ticker : str, optional
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).

    Returns
    -------
    None
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    if template_type == 'fit':
        st.header('–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ üîß')
        selected_model = st.selectbox(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
            ModelType,
            key=np.random.randint(10_000)
        )
        model_id = st.text_input(
            'ID:',
            placeholder='–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª–∏:',
            key=np.random.randint(10_000)
        )

        seasonal_periods = None
        selected_period = selected_trend = selected_seasonal = None

        if selected_model == ModelType.holt_winters:
            selected_trend = st.selectbox(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–¥–æ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:',
                ['add', 'mul'],
                index=None,
                key=np.random.randint(10_000)
            )
            selected_seasonal = st.selectbox(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ–∑–æ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:',
                ['add', 'mul'],
                index=None,
                key=np.random.randint(10_000)
            )
            seasonal_periods = st.text_input(
                '–°–µ–∑–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:',
                placeholder='–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:',
                key=np.random.randint(10_000)
            )

        if model_id:
            if st.button(
                '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å!',
                key=np.random.randint(10_000)
            ):
                await train_model(
                    df=df,
                    model_id=model_id,
                    selected_model=selected_model,
                    trend=selected_trend,
                    seasonal=selected_seasonal,
                    seasonal_periods=seasonal_periods
                    )
    else:
        st.header('–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ üî•')
        list_models = await get_list_models()

        if st.button(
            '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏',
            key=np.random.randint(10_000)
        ):
            await delete_models()

        selected_model = st.selectbox(
            '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
            list_models,
            key=np.random.randint(10_000)
        )
        if selected_model:
            selected_period = (
                st.text_input(
                    '–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏):',
                    placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:',
                    key=np.random.randint(10_000)
                )
            )

            if st.button(
                '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å!',
                key=np.random.randint(10_000)
            ) and selected_period:
                await set_active_model(model_id=selected_model)
                await inference_model(
                    df=df,
                    ticker=ticker,
                    period=int(selected_period)
                )


async def create_template(
    is_uploaded: bool,
    template_type: Literal['–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç', '–ê–∫—Ü–∏–∏']
) -> None:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Parameters
    ----------
    is_uploaded : bool
        –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    template_type : Literal['–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç', '–ê–∫—Ü–∏–∏']
        –¢–∏–ø —à–∞–±–ª–æ–Ω–∞ ('–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–ª—é—Ç' –∏–ª–∏ '–ê–∫—Ü–∏–∏').

    Returns
    -------
    None
        –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º —Ç–∏–∫–µ—Ä–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        (–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ).
    """
    df, is_uploaded = upload_file(template_type=template_type)

    if is_uploaded:
        st.write(df)
        selected_ticker = select_ticker(
            df=df,
            template_type=template_type
        )

        if selected_ticker:
            st.header('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞ üìä')
            get_analytics(
                df=df,
                template_type=template_type,
                selected_ticker=selected_ticker
            )

            tab_fit, tab_predict = st.tabs(
                tabs=['–û–±—É—á–µ–Ω–∏–µ', '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ']
            )

            with tab_fit:
                await fit_or_predict(
                    template_type='fit',
                    df=df[selected_ticker]
                )

            with tab_predict:
                await fit_or_predict(
                    template_type='predict',
                    df=df,
                    ticker=selected_ticker
                )
